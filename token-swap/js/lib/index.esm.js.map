{"version":3,"file":"index.esm.js","sources":["../client/layout.js","../client/util/send-and-confirm-transaction.js","../client/util/account.js","../client/token-swap.js"],"sourcesContent":["// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string'): Object => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  return rsl;\n};\n","// @flow\n\nimport {sendAndConfirmTransaction as realSendAndConfirmTransaction} from '@solana/web3.js';\nimport type {\n  Account,\n  Connection,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nexport function sendAndConfirmTransaction(\n  title: string,\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<Account>\n): Promise<TransactionSignature> {\n  return realSendAndConfirmTransaction(connection, transaction, signers, {\n    skipPreflight: false,\n    commitment: 'recent',\n    preflightCommitment: 'recent',\n  });\n}\n","import type {Connection} from '@solana/web3.js';\nimport {PublicKey} from '@solana/web3.js';\n\nexport async function loadAccount(\n  connection: Connection,\n  address: PublicKey,\n  programId: PublicKey,\n): Buffer {\n  const accountInfo = await connection.getAccountInfo(address);\n  if (accountInfo === null) {\n    throw new Error('Failed to find account');\n  }\n\n  if (!accountInfo.owner.equals(programId)) {\n    throw new Error(`Invalid owner: ${JSON.stringify(accountInfo.owner)}`);\n  }\n\n  return Buffer.from(accountInfo.data);\n}\n","/**\n * @flow\n */\n\nimport assert from 'assert';\nimport BN from 'bn.js';\nimport * as BufferLayout from 'buffer-layout';\nimport type {Connection, TransactionSignature} from '@solana/web3.js';\nimport {\n  Account,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nimport * as Layout from './layout';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {loadAccount} from './util/account';\n\n/**\n * Some amount of tokens\n */\nexport class Numberu64 extends BN {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer(): typeof Buffer {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n    if (b.length === 8) {\n      return b;\n    }\n    assert(b.length < 8, 'Numberu64 too large');\n\n    const zeroPad = Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n\n  /**\n   * Construct a Numberu64 from Buffer representation\n   */\n  static fromBuffer(buffer: typeof Buffer): Numberu64 {\n    assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new Numberu64(\n      [...buffer]\n        .reverse()\n        .map(i => `00${i.toString(16)}`.slice(-2))\n        .join(''),\n      16,\n    );\n  }\n}\n\n/**\n * @private\n */\nexport const TokenSwapLayout: typeof BufferLayout.Structure = BufferLayout.struct(\n  [\n    BufferLayout.u8('version'),\n    BufferLayout.u8('isInitialized'),\n    BufferLayout.u8('nonce'),\n    Layout.publicKey('tokenProgramId'),\n    Layout.publicKey('tokenAccountA'),\n    Layout.publicKey('tokenAccountB'),\n    Layout.publicKey('tokenPool'),\n    Layout.publicKey('mintA'),\n    Layout.publicKey('mintB'),\n    Layout.publicKey('feeAccount'),\n    Layout.uint64('tradeFeeNumerator'),\n    Layout.uint64('tradeFeeDenominator'),\n    Layout.uint64('ownerTradeFeeNumerator'),\n    Layout.uint64('ownerTradeFeeDenominator'),\n    Layout.uint64('ownerWithdrawFeeNumerator'),\n    Layout.uint64('ownerWithdrawFeeDenominator'),\n    Layout.uint64('hostFeeNumerator'),\n    Layout.uint64('hostFeeDenominator'),\n    BufferLayout.u8('curveType'),\n    BufferLayout.blob(32, 'curveParameters'),\n  ],\n);\n\nexport const CurveType = Object.freeze({\n  ConstantProduct: 0, // Constant product curve, Uniswap-style\n  ConstantPrice: 1, // Constant price curve, always X amount of A token for 1 B token, where X is defined at init\n  Stable: 2,\n  Offset: 3, // Offset curve, like Uniswap, but with an additional offset on the token B side\n});\n\n/**\n * A program to exchange tokens against a pool of liquidity\n */\nexport class TokenSwap {\n  /**\n   * @private\n   */\n  connection: Connection;\n\n  /**\n   * Program Identifier for the Swap program\n   */\n  swapProgramId: PublicKey;\n\n  /**\n   * Program Identifier for the Token program\n   */\n  tokenProgramId: PublicKey;\n\n  /**\n   * The public key identifying this swap program\n   */\n  tokenSwap: PublicKey;\n\n  /**\n   * The public key for the liquidity pool token mint\n   */\n  poolToken: PublicKey;\n\n  /**\n   * The public key for the fee account receiving trade and/or withdrawal fees\n   */\n  feeAccount: PublicKey;\n\n  /**\n   * Authority\n   */\n  authority: PublicKey;\n\n  /**\n   * The public key for the first token account of the trading pair\n   */\n  tokenAccountA: PublicKey;\n\n  /**\n   * The public key for the second token account of the trading pair\n   */\n  tokenAccountB: PublicKey;\n\n  /**\n   * The public key for the mint of the first token account of the trading pair\n   */\n  mintA: PublicKey;\n\n  /**\n   * The public key for the mint of the second token account of the trading pair\n   */\n  mintB: PublicKey;\n\n  /**\n   * Trading fee numerator\n   */\n  tradeFeeNumerator: Numberu64;\n\n  /**\n   * Trading fee denominator\n   */\n  tradeFeeDenominator: Numberu64;\n\n  /**\n   * Owner trading fee numerator\n   */\n  ownerTradeFeeNumerator: Numberu64;\n\n  /**\n   * Owner trading fee denominator\n   */\n  ownerTradeFeeDenominator: Numberu64;\n\n  /**\n   * Owner withdraw fee numerator\n   */\n  ownerWithdrawFeeNumerator: Numberu64;\n\n  /**\n   * Owner withdraw fee denominator\n   */\n  ownerWithdrawFeeDenominator: Numberu64;\n\n  /**\n   * Host trading fee numerator\n   */\n  hostFeeNumerator: Numberu64;\n\n  /**\n   * Host trading fee denominator\n   */\n  hostFeeDenominator: Numberu64;\n\n  /**\n   * CurveType, current options are:\n   */\n  curveType: number;\n\n  /**\n   * Fee payer\n   */\n  payer: Account;\n\n  /**\n   * Create a Token object attached to the specific token\n   *\n   * @param connection The connection to use\n   * @param tokenSwap The token swap account\n   * @param swapProgramId The program ID of the token-swap program\n   * @param tokenProgramId The program ID of the token program\n   * @param poolToken The pool token\n   * @param authority The authority over the swap and accounts\n   * @param tokenAccountA: The token swap's Token A account\n   * @param tokenAccountB: The token swap's Token B account\n   * @param payer Pays for the transaction\n   */\n  constructor(\n    connection: Connection,\n    tokenSwap: PublicKey,\n    swapProgramId: PublicKey,\n    tokenProgramId: PublicKey,\n    poolToken: PublicKey,\n    feeAccount: PublicKey,\n    authority: PublicKey,\n    tokenAccountA: PublicKey,\n    tokenAccountB: PublicKey,\n    mintA: PublicKey,\n    mintB: PublicKey,\n    tradeFeeNumerator: Numberu64,\n    tradeFeeDenominator: Numberu64,\n    ownerTradeFeeNumerator: Numberu64,\n    ownerTradeFeeDenominator: Numberu64,\n    ownerWithdrawFeeNumerator: Numberu64,\n    ownerWithdrawFeeDenominator: Numberu64,\n    hostFeeNumerator: Numberu64,\n    hostFeeDenominator: Numberu64,\n    curveType: number,\n    payer: Account,\n  ) {\n    Object.assign(this, {\n      connection,\n      tokenSwap,\n      swapProgramId,\n      tokenProgramId,\n      poolToken,\n      feeAccount,\n      authority,\n      tokenAccountA,\n      tokenAccountB,\n      mintA,\n      mintB,\n      tradeFeeNumerator,\n      tradeFeeDenominator,\n      ownerTradeFeeNumerator,\n      ownerTradeFeeDenominator,\n      ownerWithdrawFeeNumerator,\n      ownerWithdrawFeeDenominator,\n      hostFeeNumerator,\n      hostFeeDenominator,\n      curveType,\n      payer,\n    });\n  }\n\n  /**\n   * Get the minimum balance for the token swap account to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n  static async getMinBalanceRentForExemptTokenSwap(\n    connection: Connection,\n  ): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(\n      TokenSwapLayout.span,\n    );\n  }\n\n  static createInitSwapInstruction(\n    tokenSwapAccount: Account,\n    authority: PublicKey,\n    tokenAccountA: PublicKey,\n    tokenAccountB: PublicKey,\n    tokenPool: PublicKey,\n    feeAccount: PublicKey,\n    tokenAccountPool: PublicKey,\n    tokenProgramId: PublicKey,\n    swapProgramId: PublicKey,\n    nonce: number,\n    tradeFeeNumerator: number,\n    tradeFeeDenominator: number,\n    ownerTradeFeeNumerator: number,\n    ownerTradeFeeDenominator: number,\n    ownerWithdrawFeeNumerator: number,\n    ownerWithdrawFeeDenominator: number,\n    hostFeeNumerator: number,\n    hostFeeDenominator: number,\n    curveType: number,\n    amp?: number,\n  ): TransactionInstruction {\n    const keys = [\n      {pubkey: tokenSwapAccount.publicKey, isSigner: false, isWritable: true},\n      {pubkey: authority, isSigner: false, isWritable: false},\n      {pubkey: tokenAccountA, isSigner: false, isWritable: false},\n      {pubkey: tokenAccountB, isSigner: false, isWritable: false},\n      {pubkey: tokenPool, isSigner: false, isWritable: true},\n      {pubkey: feeAccount, isSigner: false, isWritable: false},\n      {pubkey: tokenAccountPool, isSigner: false, isWritable: true},\n      {pubkey: tokenProgramId, isSigner: false, isWritable: false},\n    ];\n    const commandDataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u8('nonce'),\n      BufferLayout.nu64('tradeFeeNumerator'),\n      BufferLayout.nu64('tradeFeeDenominator'),\n      BufferLayout.nu64('ownerTradeFeeNumerator'),\n      BufferLayout.nu64('ownerTradeFeeDenominator'),\n      BufferLayout.nu64('ownerWithdrawFeeNumerator'),\n      BufferLayout.nu64('ownerWithdrawFeeDenominator'),\n      BufferLayout.nu64('hostFeeNumerator'),\n      BufferLayout.nu64('hostFeeDenominator'),\n      BufferLayout.u8('curveType'),\n      BufferLayout.nu64('amp'),\n      BufferLayout.blob(24, 'curveParameters'),\n    ]);\n\n    let data = Buffer.alloc(1024);\n    {\n      const encodeLength = commandDataLayout.encode(\n        {\n          instruction: 0, // InitializeSwap instruction\n          nonce,\n          tradeFeeNumerator,\n          tradeFeeDenominator,\n          ownerTradeFeeNumerator,\n          ownerTradeFeeDenominator,\n          ownerWithdrawFeeNumerator,\n          ownerWithdrawFeeDenominator,\n          hostFeeNumerator,\n          hostFeeDenominator,\n          curveType,\n          amp,\n        },\n        data,\n      );\n      data = data.slice(0, encodeLength);\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data,\n    });\n  }\n\n  static async loadTokenSwap(\n    connection: Connection,\n    address: PublicKey,\n    programId: PublicKey,\n    payer: Account,\n  ): Promise<TokenSwap> {\n    const data = await loadAccount(connection, address, programId);\n    const tokenSwapData = TokenSwapLayout.decode(data);\n    if (!tokenSwapData.isInitialized) {\n      throw new Error(`Invalid token swap state`);\n    }\n\n    const [authority] = await PublicKey.findProgramAddress(\n      [address.toBuffer()],\n      programId,\n    );\n\n    const poolToken = new PublicKey(tokenSwapData.tokenPool);\n    const feeAccount = new PublicKey(tokenSwapData.feeAccount);\n    const tokenAccountA = new PublicKey(tokenSwapData.tokenAccountA);\n    const tokenAccountB = new PublicKey(tokenSwapData.tokenAccountB);\n    const mintA = new PublicKey(tokenSwapData.mintA);\n    const mintB = new PublicKey(tokenSwapData.mintB);\n    const tokenProgramId = new PublicKey(tokenSwapData.tokenProgramId);\n\n    const tradeFeeNumerator = Numberu64.fromBuffer(\n      tokenSwapData.tradeFeeNumerator,\n    );\n    const tradeFeeDenominator = Numberu64.fromBuffer(\n      tokenSwapData.tradeFeeDenominator,\n    );\n    const ownerTradeFeeNumerator = Numberu64.fromBuffer(\n      tokenSwapData.ownerTradeFeeNumerator,\n    );\n    const ownerTradeFeeDenominator = Numberu64.fromBuffer(\n      tokenSwapData.ownerTradeFeeDenominator,\n    );\n    const ownerWithdrawFeeNumerator = Numberu64.fromBuffer(\n      tokenSwapData.ownerWithdrawFeeNumerator,\n    );\n    const ownerWithdrawFeeDenominator = Numberu64.fromBuffer(\n      tokenSwapData.ownerWithdrawFeeDenominator,\n    );\n    const hostFeeNumerator = Numberu64.fromBuffer(\n      tokenSwapData.hostFeeNumerator,\n    );\n    const hostFeeDenominator = Numberu64.fromBuffer(\n      tokenSwapData.hostFeeDenominator,\n    );\n    const curveType = tokenSwapData.curveType;\n\n    return new TokenSwap(\n      connection,\n      address,\n      programId,\n      tokenProgramId,\n      poolToken,\n      feeAccount,\n      authority,\n      tokenAccountA,\n      tokenAccountB,\n      mintA,\n      mintB,\n      tradeFeeNumerator,\n      tradeFeeDenominator,\n      ownerTradeFeeNumerator,\n      ownerTradeFeeDenominator,\n      ownerWithdrawFeeNumerator,\n      ownerWithdrawFeeDenominator,\n      hostFeeNumerator,\n      hostFeeDenominator,\n      curveType,\n      payer,\n    );\n  }\n\n  /**\n   * Create a new Token Swap\n   *\n   * @param connection The connection to use\n   * @param payer Pays for the transaction\n   * @param tokenSwapAccount The token swap account\n   * @param authority The authority over the swap and accounts\n   * @param nonce The nonce used to generate the authority\n   * @param tokenAccountA: The token swap's Token A account\n   * @param tokenAccountB: The token swap's Token B account\n   * @param poolToken The pool token\n   * @param tokenAccountPool The token swap's pool token account\n   * @param tokenProgramId The program ID of the token program\n   * @param swapProgramId The program ID of the token-swap program\n   * @param feeNumerator Numerator of the fee ratio\n   * @param feeDenominator Denominator of the fee ratio\n   * @return Token object for the newly minted token, Public key of the account holding the total supply of new tokens\n   */\n  static async createTokenSwap(\n    connection: Connection,\n    payer: Account,\n    tokenSwapAccount: Account,\n    authority: PublicKey,\n    tokenAccountA: PublicKey,\n    tokenAccountB: PublicKey,\n    poolToken: PublicKey,\n    mintA: PublicKey,\n    mintB: PublicKey,\n    feeAccount: PublicKey,\n    tokenAccountPool: PublicKey,\n    swapProgramId: PublicKey,\n    tokenProgramId: PublicKey,\n    nonce: number,\n    tradeFeeNumerator: number,\n    tradeFeeDenominator: number,\n    ownerTradeFeeNumerator: number,\n    ownerTradeFeeDenominator: number,\n    ownerWithdrawFeeNumerator: number,\n    ownerWithdrawFeeDenominator: number,\n    hostFeeNumerator: number,\n    hostFeeDenominator: number,\n    curveType: number,\n    amp?: number,\n  ): Promise<TokenSwap> {\n    let transaction;\n    const tokenSwap = new TokenSwap(\n      connection,\n      tokenSwapAccount.publicKey,\n      swapProgramId,\n      tokenProgramId,\n      poolToken,\n      feeAccount,\n      authority,\n      tokenAccountA,\n      tokenAccountB,\n      mintA,\n      mintB,\n      new Numberu64(tradeFeeNumerator),\n      new Numberu64(tradeFeeDenominator),\n      new Numberu64(ownerTradeFeeNumerator),\n      new Numberu64(ownerTradeFeeDenominator),\n      new Numberu64(ownerWithdrawFeeNumerator),\n      new Numberu64(ownerWithdrawFeeDenominator),\n      new Numberu64(hostFeeNumerator),\n      new Numberu64(hostFeeDenominator),\n      curveType,\n      payer,\n    );\n\n    // Allocate memory for the account\n    const balanceNeeded = await TokenSwap.getMinBalanceRentForExemptTokenSwap(\n      connection,\n    );\n    transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: tokenSwapAccount.publicKey,\n        lamports: balanceNeeded,\n        space: TokenSwapLayout.span,\n        programId: swapProgramId,\n      }),\n    );\n\n    const instruction = TokenSwap.createInitSwapInstruction(\n      tokenSwapAccount,\n      authority,\n      tokenAccountA,\n      tokenAccountB,\n      poolToken,\n      feeAccount,\n      tokenAccountPool,\n      tokenProgramId,\n      swapProgramId,\n      nonce,\n      tradeFeeNumerator,\n      tradeFeeDenominator,\n      ownerTradeFeeNumerator,\n      ownerTradeFeeDenominator,\n      ownerWithdrawFeeNumerator,\n      ownerWithdrawFeeDenominator,\n      hostFeeNumerator,\n      hostFeeDenominator,\n      curveType,\n      amp,\n    );\n\n    transaction.add(instruction);\n    await sendAndConfirmTransaction(\n      'createAccount and InitializeSwap',\n      connection,\n      transaction,\n      payer,\n      tokenSwapAccount,\n    );\n\n    return tokenSwap;\n  }\n\n  /**\n   * Swap token A for token B\n   *\n   * @param userSource User's source token account\n   * @param poolSource Pool's source token account\n   * @param poolDestination Pool's destination token account\n   * @param userDestination User's destination token account\n   * @param hostFeeAccount Host account to gather fees\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param amountIn Amount to transfer from source account\n   * @param minimumAmountOut Minimum amount of tokens the user will receive\n   */\n  async swap(\n    userSource: PublicKey,\n    poolSource: PublicKey,\n    poolDestination: PublicKey,\n    userDestination: PublicKey,\n    hostFeeAccount: ?PublicKey,\n    userTransferAuthority: Account,\n    amountIn: number | Numberu64,\n    minimumAmountOut: number | Numberu64,\n  ): Promise<TransactionSignature> {\n    return await sendAndConfirmTransaction(\n      'swap',\n      this.connection,\n      new Transaction().add(\n        TokenSwap.swapInstruction(\n          this.tokenSwap,\n          this.authority,\n          userTransferAuthority.publicKey,\n          userSource,\n          poolSource,\n          poolDestination,\n          userDestination,\n          this.poolToken,\n          this.feeAccount,\n          hostFeeAccount,\n          this.swapProgramId,\n          this.tokenProgramId,\n          amountIn,\n          minimumAmountOut,\n        ),\n      ),\n      this.payer,\n      userTransferAuthority,\n    );\n  }\n\n  static swapInstruction(\n    tokenSwap: PublicKey,\n    authority: PublicKey,\n    userTransferAuthority: PublicKey,\n    userSource: PublicKey,\n    poolSource: PublicKey,\n    poolDestination: PublicKey,\n    userDestination: PublicKey,\n    poolMint: PublicKey,\n    feeAccount: PublicKey,\n    hostFeeAccount: ?PublicKey,\n    swapProgramId: PublicKey,\n    tokenProgramId: PublicKey,\n    amountIn: number | Numberu64,\n    minimumAmountOut: number | Numberu64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amountIn'),\n      Layout.uint64('minimumAmountOut'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 1, // Swap instruction\n        amountIn: new Numberu64(amountIn).toBuffer(),\n        minimumAmountOut: new Numberu64(minimumAmountOut).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {pubkey: tokenSwap, isSigner: false, isWritable: false},\n      {pubkey: authority, isSigner: false, isWritable: false},\n      {pubkey: userTransferAuthority, isSigner: true, isWritable: false},\n      {pubkey: userSource, isSigner: false, isWritable: true},\n      {pubkey: poolSource, isSigner: false, isWritable: true},\n      {pubkey: poolDestination, isSigner: false, isWritable: true},\n      {pubkey: userDestination, isSigner: false, isWritable: true},\n      {pubkey: poolMint, isSigner: false, isWritable: true},\n      {pubkey: feeAccount, isSigner: false, isWritable: true},\n      {pubkey: tokenProgramId, isSigner: false, isWritable: false},\n    ];\n    if (hostFeeAccount != null) {\n      keys.push({pubkey: hostFeeAccount, isSigner: false, isWritable: true});\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data,\n    });\n  }\n\n  /**\n   * Deposit tokens into the pool\n   * @param userAccountA User account for token A\n   * @param userAccountB User account for token B\n   * @param poolAccount User account for pool token\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param poolTokenAmount Amount of pool tokens to mint\n   * @param maximumTokenA The maximum amount of token A to deposit\n   * @param maximumTokenB The maximum amount of token B to deposit\n   */\n  async depositAllTokenTypes(\n    userAccountA: PublicKey,\n    userAccountB: PublicKey,\n    poolAccount: PublicKey,\n    userTransferAuthority: Account,\n    poolTokenAmount: number | Numberu64,\n    maximumTokenA: number | Numberu64,\n    maximumTokenB: number | Numberu64,\n  ): Promise<TransactionSignature> {\n    return await sendAndConfirmTransaction(\n      'depositAllTokenTypes',\n      this.connection,\n      new Transaction().add(\n        TokenSwap.depositAllTokenTypesInstruction(\n          this.tokenSwap,\n          this.authority,\n          userTransferAuthority.publicKey,\n          userAccountA,\n          userAccountB,\n          this.tokenAccountA,\n          this.tokenAccountB,\n          this.poolToken,\n          poolAccount,\n          this.swapProgramId,\n          this.tokenProgramId,\n          poolTokenAmount,\n          maximumTokenA,\n          maximumTokenB,\n        ),\n      ),\n      this.payer,\n      userTransferAuthority,\n    );\n  }\n\n  static depositAllTokenTypesInstruction(\n    tokenSwap: PublicKey,\n    authority: PublicKey,\n    userTransferAuthority: PublicKey,\n    sourceA: PublicKey,\n    sourceB: PublicKey,\n    intoA: PublicKey,\n    intoB: PublicKey,\n    poolToken: PublicKey,\n    poolAccount: PublicKey,\n    swapProgramId: PublicKey,\n    tokenProgramId: PublicKey,\n    poolTokenAmount: number | Numberu64,\n    maximumTokenA: number | Numberu64,\n    maximumTokenB: number | Numberu64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('poolTokenAmount'),\n      Layout.uint64('maximumTokenA'),\n      Layout.uint64('maximumTokenB'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // Deposit instruction\n        poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n        maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\n        maximumTokenB: new Numberu64(maximumTokenB).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {pubkey: tokenSwap, isSigner: false, isWritable: false},\n      {pubkey: authority, isSigner: false, isWritable: false},\n      {pubkey: userTransferAuthority, isSigner: true, isWritable: false},\n      {pubkey: sourceA, isSigner: false, isWritable: true},\n      {pubkey: sourceB, isSigner: false, isWritable: true},\n      {pubkey: intoA, isSigner: false, isWritable: true},\n      {pubkey: intoB, isSigner: false, isWritable: true},\n      {pubkey: poolToken, isSigner: false, isWritable: true},\n      {pubkey: poolAccount, isSigner: false, isWritable: true},\n      {pubkey: tokenProgramId, isSigner: false, isWritable: false},\n    ];\n    return new TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data,\n    });\n  }\n\n  /**\n   * Withdraw tokens from the pool\n   *\n   * @param userAccountA User account for token A\n   * @param userAccountB User account for token B\n   * @param poolAccount User account for pool token\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param poolTokenAmount Amount of pool tokens to burn\n   * @param minimumTokenA The minimum amount of token A to withdraw\n   * @param minimumTokenB The minimum amount of token B to withdraw\n   */\n  async withdrawAllTokenTypes(\n    userAccountA: PublicKey,\n    userAccountB: PublicKey,\n    poolAccount: PublicKey,\n    userTransferAuthority: Account,\n    poolTokenAmount: number | Numberu64,\n    minimumTokenA: number | Numberu64,\n    minimumTokenB: number | Numberu64,\n  ): Promise<TransactionSignature> {\n    return await sendAndConfirmTransaction(\n      'withdraw',\n      this.connection,\n      new Transaction().add(\n        TokenSwap.withdrawAllTokenTypesInstruction(\n          this.tokenSwap,\n          this.authority,\n          userTransferAuthority.publicKey,\n          this.poolToken,\n          this.feeAccount,\n          poolAccount,\n          this.tokenAccountA,\n          this.tokenAccountB,\n          userAccountA,\n          userAccountB,\n          this.swapProgramId,\n          this.tokenProgramId,\n          poolTokenAmount,\n          minimumTokenA,\n          minimumTokenB,\n        ),\n      ),\n      this.payer,\n      userTransferAuthority,\n    );\n  }\n\n  static withdrawAllTokenTypesInstruction(\n    tokenSwap: PublicKey,\n    authority: PublicKey,\n    userTransferAuthority: PublicKey,\n    poolMint: PublicKey,\n    feeAccount: PublicKey,\n    sourcePoolAccount: PublicKey,\n    fromA: PublicKey,\n    fromB: PublicKey,\n    userAccountA: PublicKey,\n    userAccountB: PublicKey,\n    swapProgramId: PublicKey,\n    tokenProgramId: PublicKey,\n    poolTokenAmount: number | Numberu64,\n    minimumTokenA: number | Numberu64,\n    minimumTokenB: number | Numberu64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('poolTokenAmount'),\n      Layout.uint64('minimumTokenA'),\n      Layout.uint64('minimumTokenB'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 3, // Withdraw instruction\n        poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n        minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\n        minimumTokenB: new Numberu64(minimumTokenB).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {pubkey: tokenSwap, isSigner: false, isWritable: false},\n      {pubkey: authority, isSigner: false, isWritable: false},\n      {pubkey: userTransferAuthority, isSigner: true, isWritable: false},\n      {pubkey: poolMint, isSigner: false, isWritable: true},\n      {pubkey: sourcePoolAccount, isSigner: false, isWritable: true},\n      {pubkey: fromA, isSigner: false, isWritable: true},\n      {pubkey: fromB, isSigner: false, isWritable: true},\n      {pubkey: userAccountA, isSigner: false, isWritable: true},\n      {pubkey: userAccountB, isSigner: false, isWritable: true},\n      {pubkey: feeAccount, isSigner: false, isWritable: true},\n      {pubkey: tokenProgramId, isSigner: false, isWritable: false},\n    ];\n    return new TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data,\n    });\n  }\n\n  /**\n   * Deposit one side of tokens into the pool\n   * @param userAccount User account to deposit token A or B\n   * @param poolAccount User account to receive pool tokens\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param sourceTokenAmount The amount of token A or B to deposit\n   * @param minimumPoolTokenAmount Minimum amount of pool tokens to mint\n   */\n  async depositSingleTokenTypeExactAmountIn(\n    userAccount: PublicKey,\n    poolAccount: PublicKey,\n    userTransferAuthority: Account,\n    sourceTokenAmount: number | Numberu64,\n    minimumPoolTokenAmount: number | Numberu64,\n  ): Promise<TransactionSignature> {\n    return await sendAndConfirmTransaction(\n      'depositSingleTokenTypeExactAmountIn',\n      this.connection,\n      new Transaction().add(\n        TokenSwap.depositSingleTokenTypeExactAmountInInstruction(\n          this.tokenSwap,\n          this.authority,\n          userTransferAuthority.publicKey,\n          userAccount,\n          this.tokenAccountA,\n          this.tokenAccountB,\n          this.poolToken,\n          poolAccount,\n          this.swapProgramId,\n          this.tokenProgramId,\n          sourceTokenAmount,\n          minimumPoolTokenAmount,\n        ),\n      ),\n      this.payer,\n      userTransferAuthority,\n    );\n  }\n\n  static depositSingleTokenTypeExactAmountInInstruction(\n    tokenSwap: PublicKey,\n    authority: PublicKey,\n    userTransferAuthority: PublicKey,\n    source: PublicKey,\n    intoA: PublicKey,\n    intoB: PublicKey,\n    poolToken: PublicKey,\n    poolAccount: PublicKey,\n    swapProgramId: PublicKey,\n    tokenProgramId: PublicKey,\n    sourceTokenAmount: number | Numberu64,\n    minimumPoolTokenAmount: number | Numberu64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('sourceTokenAmount'),\n      Layout.uint64('minimumPoolTokenAmount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 4, // depositSingleTokenTypeExactAmountIn instruction\n        sourceTokenAmount: new Numberu64(sourceTokenAmount).toBuffer(),\n        minimumPoolTokenAmount: new Numberu64(\n          minimumPoolTokenAmount,\n        ).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {pubkey: tokenSwap, isSigner: false, isWritable: false},\n      {pubkey: authority, isSigner: false, isWritable: false},\n      {pubkey: userTransferAuthority, isSigner: true, isWritable: false},\n      {pubkey: source, isSigner: false, isWritable: true},\n      {pubkey: intoA, isSigner: false, isWritable: true},\n      {pubkey: intoB, isSigner: false, isWritable: true},\n      {pubkey: poolToken, isSigner: false, isWritable: true},\n      {pubkey: poolAccount, isSigner: false, isWritable: true},\n      {pubkey: tokenProgramId, isSigner: false, isWritable: false},\n    ];\n    return new TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data,\n    });\n  }\n\n  /**\n   * Withdraw tokens from the pool\n   *\n   * @param userAccount User account to receive token A or B\n   * @param poolAccount User account to burn pool token\n   * @param userTransferAuthority Account delegated to transfer user's tokens\n   * @param destinationTokenAmount The amount of token A or B to withdraw\n   * @param maximumPoolTokenAmount Maximum amount of pool tokens to burn\n   */\n  async withdrawSingleTokenTypeExactAmountOut(\n    userAccount: PublicKey,\n    poolAccount: PublicKey,\n    userTransferAuthority: Account,\n    destinationTokenAmount: number | Numberu64,\n    maximumPoolTokenAmount: number | Numberu64,\n  ): Promise<TransactionSignature> {\n    return await sendAndConfirmTransaction(\n      'withdrawSingleTokenTypeExactAmountOut',\n      this.connection,\n      new Transaction().add(\n        TokenSwap.withdrawSingleTokenTypeExactAmountOutInstruction(\n          this.tokenSwap,\n          this.authority,\n          userTransferAuthority.publicKey,\n          this.poolToken,\n          this.feeAccount,\n          poolAccount,\n          this.tokenAccountA,\n          this.tokenAccountB,\n          userAccount,\n          this.swapProgramId,\n          this.tokenProgramId,\n          destinationTokenAmount,\n          maximumPoolTokenAmount,\n        ),\n      ),\n      this.payer,\n      userTransferAuthority,\n    );\n  }\n\n  static withdrawSingleTokenTypeExactAmountOutInstruction(\n    tokenSwap: PublicKey,\n    authority: PublicKey,\n    userTransferAuthority: PublicKey,\n    poolMint: PublicKey,\n    feeAccount: PublicKey,\n    sourcePoolAccount: PublicKey,\n    fromA: PublicKey,\n    fromB: PublicKey,\n    userAccount: PublicKey,\n    swapProgramId: PublicKey,\n    tokenProgramId: PublicKey,\n    destinationTokenAmount: number | Numberu64,\n    maximumPoolTokenAmount: number | Numberu64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('destinationTokenAmount'),\n      Layout.uint64('maximumPoolTokenAmount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 5, // withdrawSingleTokenTypeExactAmountOut instruction\n        destinationTokenAmount: new Numberu64(\n          destinationTokenAmount,\n        ).toBuffer(),\n        maximumPoolTokenAmount: new Numberu64(\n          maximumPoolTokenAmount,\n        ).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {pubkey: tokenSwap, isSigner: false, isWritable: false},\n      {pubkey: authority, isSigner: false, isWritable: false},\n      {pubkey: userTransferAuthority, isSigner: true, isWritable: false},\n      {pubkey: poolMint, isSigner: false, isWritable: true},\n      {pubkey: sourcePoolAccount, isSigner: false, isWritable: true},\n      {pubkey: fromA, isSigner: false, isWritable: true},\n      {pubkey: fromB, isSigner: false, isWritable: true},\n      {pubkey: userAccount, isSigner: false, isWritable: true},\n      {pubkey: feeAccount, isSigner: false, isWritable: true},\n      {pubkey: tokenProgramId, isSigner: false, isWritable: false},\n    ];\n    return new TransactionInstruction({\n      keys,\n      programId: swapProgramId,\n      data,\n    });\n  }\n}\n"],"names":["publicKey","property","BufferLayout","uint64","sendAndConfirmTransaction","title","connection","transaction","signers","realSendAndConfirmTransaction","skipPreflight","commitment","preflightCommitment","loadAccount","address","programId","accountInfo","getAccountInfo","Error","owner","equals","JSON","stringify","Buffer","from","data","Numberu64","BN","toBuffer","a","toArray","reverse","b","length","assert","zeroPad","alloc","copy","fromBuffer","buffer","map","i","toString","slice","join","TokenSwapLayout","Layout","CurveType","Object","freeze","ConstantProduct","ConstantPrice","Stable","Offset","TokenSwap","constructor","tokenSwap","swapProgramId","tokenProgramId","poolToken","feeAccount","authority","tokenAccountA","tokenAccountB","mintA","mintB","tradeFeeNumerator","tradeFeeDenominator","ownerTradeFeeNumerator","ownerTradeFeeDenominator","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","hostFeeNumerator","hostFeeDenominator","curveType","payer","assign","getMinBalanceRentForExemptTokenSwap","getMinimumBalanceForRentExemption","span","createInitSwapInstruction","tokenSwapAccount","tokenPool","tokenAccountPool","nonce","amp","keys","pubkey","isSigner","isWritable","commandDataLayout","encodeLength","encode","instruction","TransactionInstruction","loadTokenSwap","tokenSwapData","decode","isInitialized","PublicKey","findProgramAddress","createTokenSwap","balanceNeeded","Transaction","add","SystemProgram","createAccount","fromPubkey","newAccountPubkey","lamports","space","swap","userSource","poolSource","poolDestination","userDestination","hostFeeAccount","userTransferAuthority","amountIn","minimumAmountOut","swapInstruction","poolMint","dataLayout","push","depositAllTokenTypes","userAccountA","userAccountB","poolAccount","poolTokenAmount","maximumTokenA","maximumTokenB","depositAllTokenTypesInstruction","sourceA","sourceB","intoA","intoB","withdrawAllTokenTypes","minimumTokenA","minimumTokenB","withdrawAllTokenTypesInstruction","sourcePoolAccount","fromA","fromB","depositSingleTokenTypeExactAmountIn","userAccount","sourceTokenAmount","minimumPoolTokenAmount","depositSingleTokenTypeExactAmountInInstruction","source","withdrawSingleTokenTypeExactAmountOut","destinationTokenAmount","maximumPoolTokenAmount","withdrawSingleTokenTypeExactAmountOutInstruction"],"mappings":"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"}